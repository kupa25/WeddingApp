// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	ViewModel.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls = WPAppStudio.Controls;
using Entities = WPAppStudio.Entities;
using EntitiesBase = WPAppStudio.Entities.Base;
using IServices = WPAppStudio.Services.Interfaces;
using IViewModels = WPAppStudio.ViewModel.Interfaces;
using Localization = WPAppStudio.Localization;
using Repositories = WPAppStudio.Repositories;
using Services = WPAppStudio.Services;
using ViewModelsBase = WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Pictures_Detail ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Pictures_DetailViewModel : ViewModelsBase.VMBase, IViewModels.IPictures_DetailViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.Pictures_FlickrPics _pictures_FlickrPics;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Pictures_DetailViewModel" /> class.
        /// </summary>
        /// <param name="pictures_FlickrPics">The Pictures_ Flickr Pics.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public Pictures_DetailViewModel(Repositories.Pictures_FlickrPics pictures_FlickrPics, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_pictures_FlickrPics = pictures_FlickrPics;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private EntitiesBase.FlickrSearchResult _currentFlickrSearchResult;

        /// <summary>
        /// CurrentFlickrSearchResult property.
        /// </summary>		
        public EntitiesBase.FlickrSearchResult CurrentFlickrSearchResult
        {
            get
            {
				return _currentFlickrSearchResult;
            }
            set
            {
                SetProperty(ref _currentFlickrSearchResult, value);
            }
        }
	
		private bool _hasNextpanoramaPictures_Detail0;

        /// <summary>
        /// HasNextpanoramaPictures_Detail0 property.
        /// </summary>		
        public bool HasNextpanoramaPictures_Detail0
        {
            get
            {
				return _hasNextpanoramaPictures_Detail0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaPictures_Detail0, value);
            }
        }
	
		private bool _hasPreviouspanoramaPictures_Detail0;

        /// <summary>
        /// HasPreviouspanoramaPictures_Detail0 property.
        /// </summary>		
        public bool HasPreviouspanoramaPictures_Detail0
        {
            get
            {
				return _hasPreviouspanoramaPictures_Detail0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaPictures_Detail0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechPictures_DetailStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechPictures_DetailStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentFlickrSearchResult.Title + " " + CurrentFlickrSearchResult.Summary);
        }
		

        private ICommand _textToSpeechPictures_DetailStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechPictures_DetailStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechPictures_DetailStaticControlCommand
        {
            get { return _textToSpeechPictures_DetailStaticControlCommand = _textToSpeechPictures_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechPictures_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the SharePictures_DetailStaticControlCommand command.
        /// </summary>
        public  void SharePictures_DetailStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentFlickrSearchResult.Title, CurrentFlickrSearchResult.Summary, CurrentFlickrSearchResult.Image, CurrentFlickrSearchResult.Image);
        }
		

        private ICommand _sharePictures_DetailStaticControlCommand;

        /// <summary>
        /// Gets the SharePictures_DetailStaticControlCommand command.
        /// </summary>
        public ICommand SharePictures_DetailStaticControlCommand
        {
            get { return _sharePictures_DetailStaticControlCommand = _sharePictures_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(SharePictures_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartPictures_DetailStaticControlCommand command.
        /// </summary>
        public  void PinToStartPictures_DetailStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IPictures_DetailViewModel), CreateTileInfoPictures_DetailStaticControl());
        }
		

        private ICommand _pinToStartPictures_DetailStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartPictures_DetailStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartPictures_DetailStaticControlCommand
        {
            get { return _pinToStartPictures_DetailStaticControlCommand = _pinToStartPictures_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartPictures_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaPictures_Detail0 command.
        /// </summary>
        public async void NextpanoramaPictures_Detail0Delegate() 
        {
				LoadingCurrentFlickrSearchResult = true;
			var next = await  _pictures_FlickrPics.Next(CurrentFlickrSearchResult);

			if(next != null)
				CurrentFlickrSearchResult = next;

			RefreshHasPrevNext();
        }
		
		
        private bool _loadingCurrentFlickrSearchResult;
		
        public bool LoadingCurrentFlickrSearchResult
        {
            get { return _loadingCurrentFlickrSearchResult; }
            set { SetProperty(ref _loadingCurrentFlickrSearchResult, value); }
        }

        private ICommand _nextpanoramaPictures_Detail0;

        /// <summary>
        /// Gets the NextpanoramaPictures_Detail0 command.
        /// </summary>
        public ICommand NextpanoramaPictures_Detail0
        {
            get { return _nextpanoramaPictures_Detail0 = _nextpanoramaPictures_Detail0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaPictures_Detail0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaPictures_Detail0 command.
        /// </summary>
        public async void PreviouspanoramaPictures_Detail0Delegate() 
        {
				LoadingCurrentFlickrSearchResult = true;
			var prev = await  _pictures_FlickrPics.Previous(CurrentFlickrSearchResult);

			if(prev != null)
				CurrentFlickrSearchResult = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaPictures_Detail0;

        /// <summary>
        /// Gets the PreviouspanoramaPictures_Detail0 command.
        /// </summary>
        public ICommand PreviouspanoramaPictures_Detail0
        {
            get { return _previouspanoramaPictures_Detail0 = _previouspanoramaPictures_Detail0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaPictures_Detail0Delegate); }
        }

        private async void RefreshHasPrevNext()
        {
            HasPreviouspanoramaPictures_Detail0 = await _pictures_FlickrPics.HasPrevious(CurrentFlickrSearchResult);
			HasNextpanoramaPictures_Detail0 = await _pictures_FlickrPics.HasNext(CurrentFlickrSearchResult);
			LoadingCurrentFlickrSearchResult = false;
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is EntitiesBase.FlickrSearchResult)) { return; }
                
                CurrentFlickrSearchResult = value as EntitiesBase.FlickrSearchResult;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the Pictures_DetailStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoPictures_DetailStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentFlickrSearchResult.Image,
                Title = CurrentFlickrSearchResult.Title,
                BackTitle = CurrentFlickrSearchResult.Title,
                BackContent = CurrentFlickrSearchResult.Summary,
                Count = 0,
                BackgroundImagePath = CurrentFlickrSearchResult.Image,
                BackBackgroundImagePath = CurrentFlickrSearchResult.Image,
                LogoPath = "Logo-9e823a0a-fcbf-4f8c-a7f4-efa1a2c27e1d.png"
            };
            return tileInfo;
        }
    }
}
