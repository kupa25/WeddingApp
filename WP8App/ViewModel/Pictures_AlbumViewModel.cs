// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	ViewModel.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls = WPAppStudio.Controls;
using Entities = WPAppStudio.Entities;
using EntitiesBase = WPAppStudio.Entities.Base;
using IServices = WPAppStudio.Services.Interfaces;
using IViewModels = WPAppStudio.ViewModel.Interfaces;
using Localization = WPAppStudio.Localization;
using Repositories = WPAppStudio.Repositories;
using Services = WPAppStudio.Services;
using ViewModelsBase = WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Pictures_Album ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Pictures_AlbumViewModel : ViewModelsBase.VMBase, IViewModels.IPictures_AlbumViewModel
    {       

		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ILockScreenService _lockScreenService;
		private readonly Repositories.IPictures_FlickrPics _pictures_FlickrPics;
		private readonly Repositories.IYoutube_YoutubeChannel _youtube_YoutubeChannel;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Pictures_AlbumViewModel" /> class.
        /// </summary>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="lockScreenService">The Lock Screen Service.</param>
        /// <param name="pictures_FlickrPics">The Pictures_ Flickr Pics.</param>
        /// <param name="youtube_YoutubeChannel">The Youtube_ Youtube Channel.</param>
        public Pictures_AlbumViewModel(IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ILockScreenService lockScreenService, Repositories.IPictures_FlickrPics pictures_FlickrPics, Repositories.IYoutube_YoutubeChannel youtube_YoutubeChannel)
        {
			_dialogService = dialogService;
			_navigationService = navigationService;
			_lockScreenService = lockScreenService;
			_pictures_FlickrPics = pictures_FlickrPics;
			_youtube_YoutubeChannel = youtube_YoutubeChannel;
        }
		
	
		private ObservableCollection<EntitiesBase.FlickrSearchResult> _pictures_AlbumListControlCollection;

        /// <summary>
        /// Pictures_AlbumListControlCollection property.
        /// </summary>		
        public ObservableCollection<EntitiesBase.FlickrSearchResult> Pictures_AlbumListControlCollection
        {
            get
            {
				
                if(_pictures_AlbumListControlCollection == null)
					GetPictures_AlbumListControlCollectionData();
				return _pictures_AlbumListControlCollection;     
            }
            set
            {
                SetProperty(ref _pictures_AlbumListControlCollection, value);
            }
        }
	
		private EntitiesBase.FlickrSearchResult _selectedPictures_AlbumListControlCollection;

        /// <summary>
        /// SelectedPictures_AlbumListControlCollection property.
        /// </summary>		
        public EntitiesBase.FlickrSearchResult SelectedPictures_AlbumListControlCollection
        {
            get
            {
				return _selectedPictures_AlbumListControlCollection;
            }
            set
            {
                _selectedPictures_AlbumListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<IViewModels.IPictures_DetailViewModel>(_selectedPictures_AlbumListControlCollection);
            }
        }
	
		private ObservableCollection<EntitiesBase.YouTubeVideo> _youtube_VideosListControlCollection;

        /// <summary>
        /// Youtube_VideosListControlCollection property.
        /// </summary>		
        public ObservableCollection<EntitiesBase.YouTubeVideo> Youtube_VideosListControlCollection
        {
            get
            {
				
                if(_youtube_VideosListControlCollection == null)
					GetYoutube_VideosListControlCollectionData();
				return _youtube_VideosListControlCollection;     
            }
            set
            {
                SetProperty(ref _youtube_VideosListControlCollection, value);
            }
        }
	
		private int _youtube_VideosListControlCollectionPageNumber;

        /// <summary>
        /// Youtube_VideosListControlCollectionPageNumber property.
        /// </summary>		
        public int Youtube_VideosListControlCollectionPageNumber
        {
            get
            {
				return _youtube_VideosListControlCollectionPageNumber;
            }
            set
            {
                SetProperty(ref _youtube_VideosListControlCollectionPageNumber, value);
            }
        }
	
		private EntitiesBase.YouTubeVideo _selectedYoutube_VideosListControlCollection;

        /// <summary>
        /// SelectedYoutube_VideosListControlCollection property.
        /// </summary>		
        public EntitiesBase.YouTubeVideo SelectedYoutube_VideosListControlCollection
        {
            get
            {
				return _selectedYoutube_VideosListControlCollection;
            }
            set
            {
                _selectedYoutube_VideosListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<IViewModels.IYoutube_DetailVideosViewModel>(_selectedYoutube_VideosListControlCollection);
            }
        }

        /// <summary>
        /// Delegate method for the RefreshPictures_AlbumListControlCollectionCommand command.
        /// </summary>
        public async void RefreshPictures_AlbumListControlCollectionCommandDelegate() 
        {
			try
			{
				LoadingPictures_AlbumListControlCollection = true;
				var items = await  _pictures_FlickrPics.Refresh();
				Pictures_AlbumListControlCollection = items;
			}
            catch (Exception ex)
            {
				Pictures_AlbumListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.flickrError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingPictures_AlbumListControlCollection = false;
			}
        }
		
		
        private bool _loadingPictures_AlbumListControlCollection;
		
        public bool LoadingPictures_AlbumListControlCollection
        {
            get { return _loadingPictures_AlbumListControlCollection; }
            set { SetProperty(ref _loadingPictures_AlbumListControlCollection, value); }
        }

        private ICommand _refreshPictures_AlbumListControlCollectionCommand;

        /// <summary>
        /// Gets the RefreshPictures_AlbumListControlCollectionCommand command.
        /// </summary>
        public ICommand RefreshPictures_AlbumListControlCollectionCommand
        {
            get { return _refreshPictures_AlbumListControlCollectionCommand = _refreshPictures_AlbumListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand(RefreshPictures_AlbumListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the GetPictures_AlbumListControlCollectionCommand command.
        /// </summary>
        public  void GetPictures_AlbumListControlCollectionCommandDelegate(int pageNumber= 0) 
        {
				GetPictures_AlbumListControlCollectionData(pageNumber);
        }
		

        private ICommand _getPictures_AlbumListControlCollectionCommand;

        /// <summary>
        /// Gets the GetPictures_AlbumListControlCollectionCommand command.
        /// </summary>
        public ICommand GetPictures_AlbumListControlCollectionCommand
        {
            get { return _getPictures_AlbumListControlCollectionCommand = _getPictures_AlbumListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand<int>(GetPictures_AlbumListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the RefreshYoutube_VideosListControlCollectionCommand command.
        /// </summary>
        public async void RefreshYoutube_VideosListControlCollectionCommandDelegate() 
        {
			try
			{
				LoadingYoutube_VideosListControlCollection = true;
				var items = await  _youtube_YoutubeChannel.Refresh();
				Youtube_VideosListControlCollection = items;
				Youtube_VideosListControlCollectionPageNumber = 0;
			}
            catch (Exception ex)
            {
				Youtube_VideosListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.youtubeError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingYoutube_VideosListControlCollection = false;
			}
        }
		
		
        private bool _loadingYoutube_VideosListControlCollection;
		
        public bool LoadingYoutube_VideosListControlCollection
        {
            get { return _loadingYoutube_VideosListControlCollection; }
            set { SetProperty(ref _loadingYoutube_VideosListControlCollection, value); }
        }

        private ICommand _refreshYoutube_VideosListControlCollectionCommand;

        /// <summary>
        /// Gets the RefreshYoutube_VideosListControlCollectionCommand command.
        /// </summary>
        public ICommand RefreshYoutube_VideosListControlCollectionCommand
        {
            get { return _refreshYoutube_VideosListControlCollectionCommand = _refreshYoutube_VideosListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand(RefreshYoutube_VideosListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the GetYoutube_VideosListControlCollectionCommand command.
        /// </summary>
        public  void GetYoutube_VideosListControlCollectionCommandDelegate(int pageNumber= 0) 
        {
				GetYoutube_VideosListControlCollectionData(pageNumber);
        }
		

        private ICommand _getYoutube_VideosListControlCollectionCommand;

        /// <summary>
        /// Gets the GetYoutube_VideosListControlCollectionCommand command.
        /// </summary>
        public ICommand GetYoutube_VideosListControlCollectionCommand
        {
            get { return _getYoutube_VideosListControlCollectionCommand = _getYoutube_VideosListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand<int>(GetYoutube_VideosListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the SetLockScreenCommand command.
        /// </summary>
        public  void SetLockScreenCommandDelegate() 
        {
				_lockScreenService.SetLockScreen("LockScreen-d17aa33e-cb6f-43be-93f4-467c0edc2ade.jpg");
        }
		

        private ICommand _setLockScreenCommand;

        /// <summary>
        /// Gets the SetLockScreenCommand command.
        /// </summary>
        public ICommand SetLockScreenCommand
        {
            get { return _setLockScreenCommand = _setLockScreenCommand ?? new ViewModelsBase.DelegateCommand(SetLockScreenCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the AboutCommand command.
        /// </summary>
        public  void AboutCommandDelegate() 
        {
				_navigationService.NavigateTo<IViewModels.IAboutViewModel>();
        }
		

        private ICommand _aboutCommand;

        /// <summary>
        /// Gets the AboutCommand command.
        /// </summary>
        public ICommand AboutCommand
        {
            get { return _aboutCommand = _aboutCommand ?? new ViewModelsBase.DelegateCommand(AboutCommandDelegate); }
        }

        private async void GetPictures_AlbumListControlCollectionData(int pageNumber = 0)
        {
	
			try
			{
				LoadingPictures_AlbumListControlCollection = true;
			
				var items = await _pictures_FlickrPics.GetData();
                Pictures_AlbumListControlCollection = items;
			}
            catch (Exception ex)
            {
				Pictures_AlbumListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.flickrError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingPictures_AlbumListControlCollection = false;
			}
		}

        private async void GetYoutube_VideosListControlCollectionData(int pageNumber = 0)
        {
	
			try
			{
				LoadingYoutube_VideosListControlCollection = true;
				Youtube_VideosListControlCollectionPageNumber = pageNumber;

                if (pageNumber == 0)
				{
					var items = await _youtube_YoutubeChannel.GetData(pageNumber);
                    Youtube_VideosListControlCollection = items;
				}
                else   
				{
					var items = await _youtube_YoutubeChannel.GetData(pageNumber);
                    foreach (var item in items)                    
                        Youtube_VideosListControlCollection.Add(item);
				}
			}
            catch (Exception ex)
            {
				Youtube_VideosListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.youtubeError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingYoutube_VideosListControlCollection = false;
			}
		}
    }
}
