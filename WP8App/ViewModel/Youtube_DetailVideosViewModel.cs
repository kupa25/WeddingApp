// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	ViewModel.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls = WPAppStudio.Controls;
using Entities = WPAppStudio.Entities;
using EntitiesBase = WPAppStudio.Entities.Base;
using IServices = WPAppStudio.Services.Interfaces;
using IViewModels = WPAppStudio.ViewModel.Interfaces;
using Localization = WPAppStudio.Localization;
using Repositories = WPAppStudio.Repositories;
using Services = WPAppStudio.Services;
using ViewModelsBase = WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Youtube_DetailVideos ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Youtube_DetailVideosViewModel : ViewModelsBase.VMBase, IViewModels.IYoutube_DetailVideosViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.Youtube_YoutubeChannel _youtube_YoutubeChannel;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Youtube_DetailVideosViewModel" /> class.
        /// </summary>
        /// <param name="youtube_YoutubeChannel">The Youtube_ Youtube Channel.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public Youtube_DetailVideosViewModel(Repositories.Youtube_YoutubeChannel youtube_YoutubeChannel, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_youtube_YoutubeChannel = youtube_YoutubeChannel;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private EntitiesBase.YouTubeVideo _currentYouTubeVideo;

        /// <summary>
        /// CurrentYouTubeVideo property.
        /// </summary>		
        public EntitiesBase.YouTubeVideo CurrentYouTubeVideo
        {
            get
            {
				return _currentYouTubeVideo;
            }
            set
            {
                SetProperty(ref _currentYouTubeVideo, value);
            }
        }
	
		private bool _hasNextpanoramaYoutube_DetailVideos0;

        /// <summary>
        /// HasNextpanoramaYoutube_DetailVideos0 property.
        /// </summary>		
        public bool HasNextpanoramaYoutube_DetailVideos0
        {
            get
            {
				return _hasNextpanoramaYoutube_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaYoutube_DetailVideos0, value);
            }
        }
	
		private bool _hasPreviouspanoramaYoutube_DetailVideos0;

        /// <summary>
        /// HasPreviouspanoramaYoutube_DetailVideos0 property.
        /// </summary>		
        public bool HasPreviouspanoramaYoutube_DetailVideos0
        {
            get
            {
				return _hasPreviouspanoramaYoutube_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaYoutube_DetailVideos0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechYoutube_DetailVideosStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentYouTubeVideo.Title + " " + CurrentYouTubeVideo.Summary);
        }
		

        private ICommand _textToSpeechYoutube_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechYoutube_DetailVideosStaticControlCommand
        {
            get { return _textToSpeechYoutube_DetailVideosStaticControlCommand = _textToSpeechYoutube_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechYoutube_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the ShareYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void ShareYoutube_DetailVideosStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentYouTubeVideo.Title, CurrentYouTubeVideo.Summary, CurrentYouTubeVideo.ExternalUrl, CurrentYouTubeVideo.VideoId);
        }
		

        private ICommand _shareYoutube_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the ShareYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand ShareYoutube_DetailVideosStaticControlCommand
        {
            get { return _shareYoutube_DetailVideosStaticControlCommand = _shareYoutube_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(ShareYoutube_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void PinToStartYoutube_DetailVideosStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IYoutube_DetailVideosViewModel), CreateTileInfoYoutube_DetailVideosStaticControl());
        }
		

        private ICommand _pinToStartYoutube_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartYoutube_DetailVideosStaticControlCommand
        {
            get { return _pinToStartYoutube_DetailVideosStaticControlCommand = _pinToStartYoutube_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartYoutube_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the GoToSourceYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void GoToSourceYoutube_DetailVideosStaticControlCommandDelegate() 
        {
				_navigationService.NavigateTo(string.IsNullOrEmpty(CurrentYouTubeVideo.ExternalUrl) ? null : new Uri(CurrentYouTubeVideo.ExternalUrl));
        }
		

        private ICommand _goToSourceYoutube_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the GoToSourceYoutube_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand GoToSourceYoutube_DetailVideosStaticControlCommand
        {
            get { return _goToSourceYoutube_DetailVideosStaticControlCommand = _goToSourceYoutube_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(GoToSourceYoutube_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaYoutube_DetailVideos0 command.
        /// </summary>
        public async void NextpanoramaYoutube_DetailVideos0Delegate() 
        {
				LoadingCurrentYouTubeVideo = true;
			var next = await  _youtube_YoutubeChannel.Next(CurrentYouTubeVideo);

			if(next != null)
				CurrentYouTubeVideo = next;

			RefreshHasPrevNext();
        }
		
		
        private bool _loadingCurrentYouTubeVideo;
		
        public bool LoadingCurrentYouTubeVideo
        {
            get { return _loadingCurrentYouTubeVideo; }
            set { SetProperty(ref _loadingCurrentYouTubeVideo, value); }
        }

        private ICommand _nextpanoramaYoutube_DetailVideos0;

        /// <summary>
        /// Gets the NextpanoramaYoutube_DetailVideos0 command.
        /// </summary>
        public ICommand NextpanoramaYoutube_DetailVideos0
        {
            get { return _nextpanoramaYoutube_DetailVideos0 = _nextpanoramaYoutube_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaYoutube_DetailVideos0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaYoutube_DetailVideos0 command.
        /// </summary>
        public  void PreviouspanoramaYoutube_DetailVideos0Delegate() 
        {
			var prev =  _youtube_YoutubeChannel.Previous(CurrentYouTubeVideo);

			if(prev != null)
				CurrentYouTubeVideo = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaYoutube_DetailVideos0;

        /// <summary>
        /// Gets the PreviouspanoramaYoutube_DetailVideos0 command.
        /// </summary>
        public ICommand PreviouspanoramaYoutube_DetailVideos0
        {
            get { return _previouspanoramaYoutube_DetailVideos0 = _previouspanoramaYoutube_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaYoutube_DetailVideos0Delegate); }
        }

        private async void RefreshHasPrevNext()
        {
            HasPreviouspanoramaYoutube_DetailVideos0 = _youtube_YoutubeChannel.HasPrevious(CurrentYouTubeVideo);
			HasNextpanoramaYoutube_DetailVideos0 = await _youtube_YoutubeChannel.HasNext(CurrentYouTubeVideo);
			LoadingCurrentYouTubeVideo = false;
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is EntitiesBase.YouTubeVideo)) { return; }
                
                CurrentYouTubeVideo = value as EntitiesBase.YouTubeVideo;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the Youtube_DetailVideosStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoYoutube_DetailVideosStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentYouTubeVideo.VideoId,
                Title = CurrentYouTubeVideo.Title,
                BackTitle = CurrentYouTubeVideo.Title,
                BackContent = CurrentYouTubeVideo.Summary,
                Count = 0,
                BackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                BackBackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                LogoPath = "Logo-9e823a0a-fcbf-4f8c-a7f4-efa1a2c27e1d.png"
            };
            return tileInfo;
        }
    }
}
